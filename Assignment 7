{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Assignment 7","provenance":[],"authorship_tag":"ABX9TyMxoo259A7ypnnB/Zy7undu"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"sobYOWSvfSNV","colab_type":"text"},"source":["# Group Members\n","\n","\n","\n","1.   Abdullahil Kafi\n","2.   Israt Nowshin\n","3.   Md Zahangir Hossain\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"0TvnRAWffgRk","colab_type":"text"},"source":["# Task 1\n"]},{"cell_type":"code","metadata":{"id":"i80NO8hFfkG0","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","import numpy as np\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZSOq0pJyfxo5","colab_type":"code","outputId":"c4989ed3-e2fc-4988-cfb9-0186c3216291","executionInfo":{"status":"ok","timestamp":1591634970072,"user_tz":-120,"elapsed":1382,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["##1\n","@tf.function\n","def conv_ten(input_ten):\n","  values, indices = tf.math.top_k(input_ten, k=1)\n","  print(values)\n","  print(indices)\n","  \n","  return values, indices\n","\n","tens_one = tf.constant([[1,2], [2,3]], dtype=tf.float32)\n","conv_ten(tens_one)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Tensor(\"TopKV2:0\", shape=(2, 1), dtype=float32)\n","Tensor(\"TopKV2:1\", shape=(2, 1), dtype=int32)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(2, 1), dtype=float32, numpy=\n"," array([[2.],\n","        [3.]], dtype=float32)>, <tf.Tensor: shape=(2, 1), dtype=int32, numpy=\n"," array([[1],\n","        [1]], dtype=int32)>)"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"UPlosujKcDlg","colab_type":"text"},"source":["# **Task2**"]},{"cell_type":"code","metadata":{"id":"BkKhPoYhhBv1","colab_type":"code","outputId":"4fabd244-2974-4e08-b1c0-295c1ee5a214","executionInfo":{"status":"ok","timestamp":1591792079152,"user_tz":-120,"elapsed":826,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["##2\n","\n","two_dimen = tf.Variable([6, 3, 660, 20], dtype = tf.float32)\n","value = tf.size(two_dimen)\n","zero_tensor = tf.Variable(tf.zeros([value]), dtype=tf.float32)\n","\n","@tf.function\n","def task_two(input_tensor, value):\n","  highest_index = tf.math.argmax(input_tensor, output_type=tf.int32)\n","  zero_tensor[highest_index].assign(1)\n","\n","  return zero_tensor\n","\n","\n","print(task_two(two_dimen, zero_tensor))\n","\n","\n","\n"],"execution_count":9,"outputs":[{"output_type":"stream","text":["tf.Tensor([0. 0. 1. 0.], shape=(4,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XCUgMIkyCHtf","colab_type":"text"},"source":["# Task 3 Couldn't do it with tf.function\n"]},{"cell_type":"code","metadata":{"id":"BNhLVlxbCGQO","colab_type":"code","outputId":"8ac7dc04-910f-47f2-8741-6a5aa49fcd12","executionInfo":{"status":"ok","timestamp":1591792422878,"user_tz":-120,"elapsed":667,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# @tf.function\n","# def task_3(input_ten, output):\n","#   v, i = tf.math.top_k(input_ten, k=1, sorted=True)\n","  \n","#   output[i[0]].assign([v[0]])\n","#   return output\n","\n","# t = tf.Variable([2,3,4,5], dtype=tf.float32)\n","# lent = tf.size(t)\n","# new_tensor = tf.Variable(tf.zeros([lent]))\n","# # new_tensor = task_3(t, lent)\n","# print(task_3(t, new_tensor))\n","\n","t = tf.Variable([2,3,4,5], dtype=tf.float32)\n","length = tf.size(t)\n","\n","new_tensor = tf.Variable(tf.zeros([length]))\n","\n","v, i = tf.math.top_k(t, k=1, sorted=True)\n","\n","new_tensor[i[0]].assign(v[0])\n","print(new_tensor)\n","\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["<tf.Variable 'Variable:0' shape=(4,) dtype=float32, numpy=array([0., 0., 0., 5.], dtype=float32)>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cEpG59W7cK0X","colab_type":"text"},"source":["# **Task4**"]},{"cell_type":"code","metadata":{"id":"lzZrcCiphm9D","colab_type":"code","outputId":"327bbc25-cd01-4cda-dd99-b6e26a53aaeb","executionInfo":{"status":"ok","timestamp":1591695533699,"user_tz":-120,"elapsed":902,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["##task 4##\n","\n","\n","@tf.function\n","def task_4(input, new, n, a):\n","  new = new[0].assign(input[0])\n","  for i in range(1,n):\n","    value = new[i-1] * a + input[i] * (1-a)\n","    new[i].assign(value)\n","  \n","  return new\n","\n","\n","a = 0.5\n","b = tf.Variable([1, 2, 3, 4], dtype=tf.float32)\n","n = tf.size(b)\n","\n","tri = b.numpy()\n","\n","e  = tf.Variable(np.zeros([n]).astype(np.float32))\n","\n","task_4(b, e, n, a)\n","\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4,), dtype=float32, numpy=array([1.   , 1.5  , 2.25 , 3.125], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"b_zrfTw8cN0J","colab_type":"text"},"source":["# **Task5 Not Correct**"]},{"cell_type":"code","metadata":{"id":"Q8JdWPzhh_2g","colab_type":"code","outputId":"efb64dda-518a-4ba9-941c-d286187d0f00","executionInfo":{"status":"ok","timestamp":1591634981184,"user_tz":-120,"elapsed":1049,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["##5\n","\n","# h = tf.Variable(tf.random.uniform(shape=(10,1)))\n","# h=tf.reshape(h,shape=(10))\n","\n","# x = tf.constant([1, 2, 7,11],dtype=tf.float32)  \n","\n","# d=0.9\n","# s=10\n","# r=puzzle_no_5(h,d,s)\n","# r=np.array(r)\n","# r[0]=r[0]/0.1\n","\n","#print(e[-1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tf.Tensor(3.125, shape=(), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"l1jyl-I4cQzb","colab_type":"text"},"source":["# **Task6**"]},{"cell_type":"code","metadata":{"id":"OFHYlAW3iBcN","colab_type":"code","outputId":"102ca1df-f2a7-4eed-93a9-6355d322905f","executionInfo":{"status":"ok","timestamp":1591696166561,"user_tz":-120,"elapsed":757,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["##6\n","\n","\n","@tf.function\n","def task_6(input_t, x, y, z):\n","  for i in range(len):\n","    if(x[i] % 2 == 0):\n","      input_t[i].assign(y[i])\n","    else:\n","      input_t[i].assign(z[i])\n","\n","  return input_t\n","\n","x = tf.Variable(tf.random.uniform([4], minval=0, maxval=10, dtype=tf.int32))\n","y = tf.Variable(tf.random.uniform([4], minval=0, maxval=10, dtype=tf.int32))\n","z = tf.Variable(tf.random.uniform([4], minval=0, maxval=10, dtype=tf.int32))\n","\n","\n","len = tf.size(x)\n","new_tensor_create = tf.Variable(np.zeros([len]).astype(np.int32))\n","\n","new_tensor = task_6(new_tensor_create, x, y, z)\n","print(new_tensor)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tf.Tensor([7 4 2 2], shape=(4,), dtype=int32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s3y7bf3U1EQZ","colab_type":"text"},"source":["Given a tensor of arbitrary and unknown shape (but at least one dimension), return 100 if the last dimension has size > 100, 12 if the last dimension has size <= 100 and > 44, and return 0 otherwise."]},{"cell_type":"markdown","metadata":{"id":"Asy9AdG0cTnD","colab_type":"text"},"source":["# **Task7**"]},{"cell_type":"code","metadata":{"id":"DluaPVA34P3q","colab_type":"code","outputId":"68798380-9cb5-40f2-8a6a-b9b06c3180aa","executionInfo":{"status":"ok","timestamp":1591638733122,"user_tz":-120,"elapsed":827,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["##7\n","\n","\n","# size_last = tensor_try.shape[-1]\n","# print(size_last)\n","\n","\n","# if(size_last > 100):\n","#   print(100)\n","# elif(size_last <= 100 and size_last > 44):\n","#   print(12)\n","# else:\n","#   print(0)\n","\n","\n","@tf.function\n","def task_7(input_ten):\n","  size_last = input_ten.shape[-1]\n","\n","  value = 0\n","  if(size_last > 100):\n","    value = 100\n","  elif(size_last <= 100 and size_last > 44):\n","    value = 12\n","  else:\n","    value = 0\n","\n","  return value\n","\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["52\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cw7V1CDg-tad","colab_type":"code","outputId":"e506e494-2ccc-42e9-ac7d-2f97f07b50ad","executionInfo":{"status":"ok","timestamp":1591638983272,"user_tz":-120,"elapsed":807,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["\n","n1 = np.random.randint(0, high=1000)\n","n2 = np.random.randint(0, high=1000)\n","n3 = np.random.randint(0, high=200)\n","print(n3)\n","\n","tensor_try = tf.Variable(tf.random.uniform(shape=(n1, n2, n3)))\n","\n","value = task_7(tensor_try)\n","value2 = task_7(tensor_try)\n","\n","print(\"The return value is {}\".format(value))\n","print(value2)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["47\n","The return value is 12\n","tf.Tensor(12, shape=(), dtype=int32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"k9g7PXv7cWvn","colab_type":"text"},"source":["# **Task8**"]},{"cell_type":"code","metadata":{"id":"7r9sdMnCDysU","colab_type":"code","colab":{}},"source":["##8\n","\n","\n","\n","@tf.function\n","def task_7(input_ten):\n","  size_last = input_ten.shape[-1]\n","  a =0\n","  b=0\n","  c=0\n","  value = 0\n","  if(size_last > 100):\n","    value = 100\n","    a =+1\n","  elif(size_last <= 100 and size_last > 44):\n","    value = 12\n","    b=+1\n","  else:\n","    value = 0\n","    c=+1\n","\n","  return value, a, b, c\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aTfaNJzaKCuc","colab_type":"code","outputId":"89d52018-0a95-4588-b2e7-d93afa55105f","executionInfo":{"status":"ok","timestamp":1591640882747,"user_tz":-120,"elapsed":2997,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":428}},"source":["d = 0\n","e = 0\n","f = 0\n","\n","for i in range(10):\n","  n1 = np.random.randint(0, high=1000)\n","  n2 = np.random.randint(0, high=1000)\n","  n3 = np.random.randint(0, high=200)\n","  \n","\n","  tensor_try = tf.Variable(tf.random.uniform(shape=(n1, n2, n3)))\n","\n","  value, i, j, k = task_7(tensor_try)\n","  d = d + i\n","  e = e + j\n","  f = f + k\n","\n","  print(\"The return value is {}\".format(value))\n","\n","print(d)\n","print(e)\n","print(f)\n","  \n"," "],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 12\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 12\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 100\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 12\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 0\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 100\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 12\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 100\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 100\n","WARNING:tensorflow:11 out of the last 11 calls to <function task_7 at 0x7f7d0a13f158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings is likely due to passing python objects instead of tensors. Also, tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. Please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for more details.\n","The return value is 12\n","tf.Tensor(4, shape=(), dtype=int32)\n","tf.Tensor(5, shape=(), dtype=int32)\n","tf.Tensor(1, shape=(), dtype=int32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vzok9Q_Qch4-","colab_type":"text"},"source":["# **Task9**"]},{"cell_type":"markdown","metadata":{"id":"Ioh_UvWSPll9","colab_type":"text"},"source":["Given two 1D tensors of equal length n, create a tensor of shape (n, n) where element i,j is the ith element of the first tensor minus the jth element of the second tensor. No loops! Hint: Tensorflow supports broadcasting much like numpy."]},{"cell_type":"code","metadata":{"id":"pd9sERQHKqQN","colab_type":"code","outputId":"4c9fba70-9e88-4416-9ee6-67d6c13b7a99","executionInfo":{"status":"ok","timestamp":1591796967620,"user_tz":-120,"elapsed":665,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["##9\n","\n","\n","@tf.function\n","def task_9(one, two):\n","  new_tensor = tf.math.abs(tf.math.subtract(one, two))\n","  print(new_tensor)\n","\n","  size_tensor = tf.size(one)\n","  print(size_tensor)\n","\n","  new_tensor = tf.broadcast_to(new_tensor, [size_tensor, size_tensor])\n","  print(new_tensor)\n","\n","  return new_tensor\n","\n","one_tensor = tf.Variable([1, 7, 3, 10])\n","two_tensor = tf.Variable([5,6,7,8])\n","\n","task_9(one_tensor, two_tensor)\n","\n","#nump.subtract.outer"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Tensor(\"Abs:0\", shape=(4,), dtype=int32)\n","Tensor(\"Size:0\", shape=(), dtype=int32)\n","Tensor(\"BroadcastTo:0\", shape=(4, 4), dtype=int32)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4, 4), dtype=int32, numpy=\n","array([[4, 1, 4, 2],\n","       [4, 1, 4, 2],\n","       [4, 1, 4, 2],\n","       [4, 1, 4, 2]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"W8W0fdv_cmdF","colab_type":"text"},"source":["# **Task10**"]},{"cell_type":"markdown","metadata":{"id":"ZGrwdVcTUf11","colab_type":"text"},"source":["Implement dot product attention: You are given a sequence of encoder states h of shape batch x time x features and the last decoder state s of shape batch x features. Compute the attention weights alpha where alpha[:, i] is equal to h[:, i] * s where * is the dot product between vectors (in this case we also have a batch dimension so the dot product should be between the corresponding vectors within the batch). That is, alpha should be of shape batch x time and alpha[:, i] should contain the attention weights for encoder time step i."]},{"cell_type":"code","metadata":{"id":"6iFf_L0ERnT-","colab_type":"code","outputId":"f88b1f59-d5b9-4750-a5f5-c63504d677c9","executionInfo":{"status":"ok","timestamp":1591796859593,"user_tz":-120,"elapsed":727,"user":{"displayName":"Abdullahil Kafi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gje1P5DOuwCc5UF_6VWGvYAClt39evnsvNSAJ9RtQ=s64","userId":"10915034449965215507"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["##10\n","\n","\n","\n","@tf.function\n","def task_10(h, s, a):\n","  for i in range(0, a.shape[1]):\n","    a[:, i].assign(tf.reduce_sum(tf.matmul(h[:, i, :], s, transpose_b=True), 0))\n","\n","    return a\n","\n","batch = 5\n","feature = 4 \n","time = 3\n","\n","\n","h = tf.Variable(tf.random.uniform([batch, time, feature]))\n","\n","s = tf.Variable(tf.random.uniform([batch, feature]))\n","\n","a = tf.Variable(tf.zeros([batch, time]))\n","\n","print(task_10(h, s, a))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[[3.832685  0.        0.       ]\n"," [3.9849281 0.        0.       ]\n"," [3.5123842 0.        0.       ]\n"," [1.8456343 0.        0.       ]\n"," [4.9765797 0.        0.       ]], shape=(5, 3), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6QOdxjEVYRge","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}